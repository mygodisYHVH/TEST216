// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.5.3
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:366


#include "ShapeTypeC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"

#if !defined (__ACE_INLINE__)
#include "ShapeTypeC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_org_omg_dds_demo_ShapeType[] =
      {
        { "color", &CORBA::_tc_string },
        { "x", &CORBA::_tc_long },
        { "y", &CORBA::_tc_long },
        { "shapesize", &CORBA::_tc_long }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_org_omg_dds_demo_ShapeType (
  ::CORBA::tk_struct,
  "IDL:org/omg/dds/demo/ShapeType:1.0",
  "ShapeType",
  _tao_fields_org_omg_dds_demo_ShapeType,
  4);


namespace org
{
  
  namespace omg
  {
    
    namespace dds
    {
      
      namespace demo
      {
        ::CORBA::TypeCode_ptr const _tc_ShapeType =
          &_tao_tc_org_omg_dds_demo_ShapeType;
      }
    }
  }
}

// TAO_IDL - Generated from
// d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_cs.cpp:56

void
org::omg::dds::demo::ShapeType::_tao_any_destructor (
    void *_tao_void_pointer)
{
  ShapeType *_tao_tmp_pointer =
    static_cast<ShapeType *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace org
{
  
  namespace omg
  {
    
    namespace dds
    {
      
      namespace demo
      {
        /// Copying insertion.
        void operator<<= (
            ::CORBA::Any &_tao_any,
            const ::org::omg::dds::demo::ShapeType &_tao_elem)
        {
          TAO::Any_Dual_Impl_T< ::org::omg::dds::demo::ShapeType>::insert_copy (
              _tao_any,
              ::org::omg::dds::demo::ShapeType::_tao_any_destructor,
              ::org::omg::dds::demo::_tc_ShapeType,
              _tao_elem);
      }

      /// Non-copying insertion.
      void operator<<= (
          ::CORBA::Any &_tao_any, ::
          org::omg::dds::demo::ShapeType *_tao_elem)
      {
        TAO::Any_Dual_Impl_T< ::org::omg::dds::demo::ShapeType>::insert (
            _tao_any,
            ::org::omg::dds::demo::ShapeType::_tao_any_destructor,
            ::org::omg::dds::demo::_tc_ShapeType,
            _tao_elem);
      }

      /// Extraction to const pointer.
      ::CORBA::Boolean operator>>= (
          const ::CORBA::Any &_tao_any,
          const ::org::omg::dds::demo::ShapeType *&_tao_elem)
      {
        return
          TAO::Any_Dual_Impl_T< ::org::omg::dds::demo::ShapeType>::extract (
              _tao_any,
              ::org::omg::dds::demo::ShapeType::_tao_any_destructor,
              ::org::omg::dds::demo::_tc_ShapeType,
              _tao_elem);
      }
    }
  }
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const org::omg::dds::demo::ShapeType &_tao_elem)
{
  TAO::Any_Dual_Impl_T<org::omg::dds::demo::ShapeType>::insert_copy (
    _tao_any,
    org::omg::dds::demo::ShapeType::_tao_any_destructor,
    org::omg::dds::demo::_tc_ShapeType,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  org::omg::dds::demo::ShapeType *_tao_elem)
{
  TAO::Any_Dual_Impl_T<org::omg::dds::demo::ShapeType>::insert (
    _tao_any,
    org::omg::dds::demo::ShapeType::_tao_any_destructor,
    org::omg::dds::demo::_tc_ShapeType,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const org::omg::dds::demo::ShapeType *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<org::omg::dds::demo::ShapeType>::extract (
      _tao_any,
      org::omg::dds::demo::ShapeType::_tao_any_destructor,
      org::omg::dds::demo::_tc_ShapeType,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_cs.cpp:49

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const org::omg::dds::demo::ShapeType &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.color.in ()) &&
    (strm << _tao_aggregate.x) &&
    (strm << _tao_aggregate.y) &&
    (strm << _tao_aggregate.shapesize);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    org::omg::dds::demo::ShapeType &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.color.out ()) &&
    (strm >> _tao_aggregate.x) &&
    (strm >> _tao_aggregate.y) &&
    (strm >> _tao_aggregate.shapesize);
}

TAO_END_VERSIONED_NAMESPACE_DECL



