// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.5.3
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:149

#ifndef _TAO_IDL_SHAPETYPEC_AUAHNH_H_
#define _TAO_IDL_SHAPETYPEC_AUAHNH_H_


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/Basic_Types.h"
#include "tao/String_Manager_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 5 || TAO_MICRO_VERSION != 3
#error This file should be regenerated with TAO_IDL
#endif

// TAO_IDL - Generated from
// d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:35

namespace org
{

  // TAO_IDL - Generated from
  // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:35

  namespace omg
  {

    // TAO_IDL - Generated from
    // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:35

    namespace dds
    {

      // TAO_IDL - Generated from
      // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:35

      namespace demo
      {

        // TAO_IDL - Generated from
        // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_type.cpp:258

        struct ShapeType;

        typedef
          ::TAO_Var_Var_T<
              ShapeType
            >
          ShapeType_var;

        typedef
          ::TAO_Out_T<
              ShapeType
            >
          ShapeType_out;

        // TAO_IDL - Generated from
        // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_ch.cpp:48

        struct  ShapeType
        {

          // TAO_IDL - Generated from
          // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

          
          typedef ShapeType_var _var_type;
          typedef ShapeType_out _out_type;

          static void _tao_any_destructor (void *);
          
          ::TAO::String_Manager color;
          ::CORBA::Long x;
          ::CORBA::Long y;
          ::CORBA::Long shapesize;
        };

        // TAO_IDL - Generated from
        // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

        extern  ::CORBA::TypeCode_ptr const _tc_ShapeType;
      
      // TAO_IDL - Generated from
      // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:64
      
      } // module org::omg::dds::demo
    
    // TAO_IDL - Generated from
    // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:64
    
    } // module org::omg::dds
  
  // TAO_IDL - Generated from
  // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:64
  
  } // module org::omg

// TAO_IDL - Generated from
// d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:64

} // module org

// TAO_IDL - Generated from
// d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::org::omg::dds::demo::ShapeType>
    : public
        Var_Size_Arg_Traits_T<
            ::org::omg::dds::demo::ShapeType,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace org
{
  
  namespace omg
  {
    
    namespace dds
    {
      
      namespace demo
      {
         void operator<<= (::CORBA::Any &, const ::org::omg::dds::demo::ShapeType &); // copying version
         void operator<<= (::CORBA::Any &, ::org::omg::dds::demo::ShapeType*); // noncopying version
         ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::org::omg::dds::demo::ShapeType *&);
      }
    }
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const org::omg::dds::demo::ShapeType &); // copying version
 void operator<<= (::CORBA::Any &, org::omg::dds::demo::ShapeType*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const org::omg::dds::demo::ShapeType *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const org::omg::dds::demo::ShapeType &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, org::omg::dds::demo::ShapeType &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\ace+dds\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:1686
#if defined (__ACE_INLINE__)
#include "ShapeTypeC.inl"
#endif /* defined INLINE */

#endif /* ifndef */

