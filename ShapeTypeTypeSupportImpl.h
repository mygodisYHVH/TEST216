/* -*- C++ -*- */
/* Generated by opendds_idl.exe version 3.13 (ACE version 6.5.3) running on input file ShapeType.idl */
#ifndef OPENDDS_IDL_GENERATED_SHAPETYPETYPESUPPORTIMPL_H_ZZ5H5W
#define OPENDDS_IDL_GENERATED_SHAPETYPETYPESUPPORTIMPL_H_ZZ5H5W
#include "ShapeTypeC.h"
#include "dds/DCPS/Definitions.h"
#include "dds/DdsDcpsC.h"
#include "ShapeTypeTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: org */



/* Begin MODULE: omg */



/* Begin MODULE: dds */



/* Begin MODULE: demo */



/* Begin STRUCT: ShapeType */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const org::omg::dds::demo::ShapeType& stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const org::omg::dds::demo::ShapeType& stru);

bool operator>>(Serializer& strm, org::omg::dds::demo::ShapeType& stru);

size_t gen_max_marshaled_size(const org::omg::dds::demo::ShapeType& stru, bool align);

size_t gen_max_marshaled_size(KeyOnly<const org::omg::dds::demo::ShapeType> stru, bool align);

void gen_find_size(KeyOnly<const org::omg::dds::demo::ShapeType> stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, KeyOnly<const org::omg::dds::demo::ShapeType> stru);

bool operator>>(Serializer& strm, KeyOnly<org::omg::dds::demo::ShapeType> stru);

template <>
struct MarshalTraits<org::omg::dds::demo::ShapeType> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return false; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace org {
namespace omg {
namespace dds {
namespace demo {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct  ShapeType_OpenDDS_KeyLessThan {
  bool operator()(const org::omg::dds::demo::ShapeType& v1, const org::omg::dds::demo::ShapeType& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.color < v2.color) return true;
    if (v2.color < v1.color) return false;
    return false;
  }
};
}
}
}
}


namespace org {
namespace omg {
namespace dds {
namespace demo {
class ShapeTypeTypeSupportImpl;
}
}
}
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<org::omg::dds::demo::ShapeType> {
  typedef org::omg::dds::demo::ShapeType MessageType;
  typedef org::omg::dds::demo::ShapeTypeSeq MessageSequenceType;
  typedef org::omg::dds::demo::ShapeTypeTypeSupport TypeSupportType;
  typedef org::omg::dds::demo::ShapeTypeTypeSupportImpl TypeSupportTypeImpl;
  typedef org::omg::dds::demo::ShapeTypeDataWriter DataWriterType;
  typedef org::omg::dds::demo::ShapeTypeDataReader DataReaderType;
  typedef org::omg::dds::demo::ShapeType_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "org::omg::dds::demo::ShapeType"; }
  static bool gen_has_key () { return true; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace org {
namespace omg {
namespace dds {
namespace demo {
class  ShapeTypeTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<ShapeTypeTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<ShapeType> TraitsType;
  typedef ShapeTypeTypeSupport TypeSupportType;
  typedef ShapeTypeTypeSupport::_var_type _var_type;
  typedef ShapeTypeTypeSupport::_ptr_type _ptr_type;

  ShapeTypeTypeSupportImpl() {}
  virtual ~ShapeTypeTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static ShapeTypeTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}
}
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
const MetaStruct& getMetaStruct<org::omg::dds::demo::ShapeType>();
bool gen_skip_over(Serializer& ser, org::omg::dds::demo::ShapeType*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: ShapeType */

/* End MODULE: demo */

/* End MODULE: dds */

/* End MODULE: omg */

/* End MODULE: org */
#endif /* OPENDDS_IDL_GENERATED_SHAPETYPETYPESUPPORTIMPL_H_ZZ5H5W */
